pragma solidity ^0.8.0;

contract Alber {
    address public owner;
    uint256 public value;
    uint256 public constant MAX_VALUE = 50000;

    constructor() {
        owner = msg.sender;
    }

    function increaseValue(uint256 _amount) external {
        require(msg.sender == owner, "Only the owner can increase the value");
        
        // Ensure that the new value doesn't exceed the maximum value
        uint256 newValue = value + _amount;
        require(newValue <= MAX_VALUE, "Value cannot exceed the maximum limit");
        
        value = newValue;
    }

    function decreaseValue(uint256 _amount) external {
        require(msg.sender == owner, "Only the owner can decrease the value");
        
        // Ensure that the value doesn't go below zero
        require(value >= _amount, "Value cannot be decreased below zero");
        
        value -= _amount;
    }

    function transferOwnership(address _newOwner) external {
        require(msg.sender == owner, "Only the owner can transfer ownership");
        require(_newOwner != address(0), "Invalid new owner address");
        
        owner = _newOwner;
    }
}
